<!--On this page, we will be displaying all the categories we have in our database
    We want to retrieve and display our categories in this index view
    In order to pass the data to the view, we have to get it from  our controller because whatever we pass into View()
    is what's going to be used in the UI

    To get the data that we are receiving from the controller, we use the model keyword - lowercase at the top 
    We then say what the type is. We will be receiving a list of categories. This way, we are defining that our view will get a 
    model that is a list of categories.
    Once we have defined this, we can use this model inside of our html code

    We can actually write c# code here. To write any c# code inside the view, we have to use the at sign
    Name and display order will be inside the list of categories. So we will have to iterate through them and display all of them
    This basically means that we need a for loop for this tr element
-->
@model List<Category>

<div class="card shadow border-0 mt-4 pb-lg-5">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2"> Category List</h2>
            </div>
        </div>
    </div>

    <div class="card-body p-4">
        <div class="row pb-3">
            <!--row with a padding top of 4-->
            <div class="col-6"></div>
            <div class="col-6 text-end">
                <!--text-end makes sure that it floats to the right side-->
                <a asp-controller="Category" asp-action="AddNewCategory" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Create New Category
                </a>
            </div>
        </div>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Display Order</th>
                    <th></th> <!--to create a third column-->
                </tr>
            </thead>

            <tbody>
                @foreach (var obj in Model.OrderBy(u => u.DisplayOrder)) // You can order them according to their name or displayOrder
                { //model needs to be in all caps for this to work
                    <tr>
                        <td>@obj.Name</td>
                        <td>@obj.DisplayOrder</td>
                        <td>
                            <div class="w-75 btn-group" role="group">
                                <!--we need two links here-->
                                <a asp-controller="Category" asp-action="Edit" asp-route-Id="@obj.Id" class="btn btn-primary mx-2"><i class="bi bi-pencil-square"></i>Edit</a> <!--we will be working with the same category controller so we write category.We have margin x of 2(mx-2). asp-route-categoryId="obj.Id" passes in the id. You can call the d part anything you want but rather name it the same thig as the variable you passed in-->
                                <a asp-controller="Category" asp-action="Delete" asp-route-Id="@obj.Id" class="btn btn-danger mx-2"><i class="bi bi-trash-fill"></i>Delete</a>
                            </div> <!--w-75 is for thw width -->
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



