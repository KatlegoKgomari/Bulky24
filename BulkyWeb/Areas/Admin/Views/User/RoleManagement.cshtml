
@model RoleManagementVM

<div class="card shadow border-0 mt-4 mb-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Manage User Role</h2>
            </div>
        </div>
    </div>

    <div class="card-body p-4">
        <form method="post" class="row">
            <!--Since we are creating the category, we have a method of post. p-3 is padding 3 and mt-4 is margin-top of four. post mans that when the button is pushed, it will hit the same endpoint with the post request. for that we need to create another action request inside teh category controller which willbe of the same name but it will be of teh type httppost so that everytime something is being posted, this endpoint will be invoked-->
            <div class="border p-3">
                <input asp-for="ApplicationUser.Id" hidden/> 
                <div asp-validation-summary="ModelOnly"> </div> <!--This writes out all the applicable error messages-->
                <div class="form-floating py-2 col-12">
                    <!--margin bottom 3-->
                    <input asp-for="ApplicationUser.Name" readonly class="form-control border-0 shadow" /> <!--form-control makes it stretch all the way out-->
                    <label asp-for="ApplicationUser.Name" class="ms-2"></label>

                   
                </div>


                <div class="form-floating py-2 col-12">
                    <select asp-for="ApplicationUser.Role"  asp-items="@Model.RoleList" class="form-select"></select>
                </div>
                @{
                    var companyVisisble = "display:none;";
                }
                @if(Model.ApplicationUser.Role == SD.Role_Company){
                    companyVisisble = "display:block;";
                }

                <div class="form-floating py-2 col-12">
                    <select asp-for="ApplicationUser.CompanyId" style="@companyVisisble" asp-items="@Model.CompanyList" class="form-select"></select>
                </div>
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <!--if the screen is medium or large, you can take 3 columns-->
                        <button type="submit" class="btn btn-primary form-control">Update Role</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <!--we want a button to go back to the previous page. that will be a link-->
                        <a  asp-action="Index" class="btn btn-outline-primary border form-control">Back</a>
                    </div>
                </div>

            </div>
        </form>
    </div>
</div>




<!--Since this partial view only has scripts, we will have to add that in a new section that is only for scripts-->
@section Scripts {
    @{
        //This is razor syntax. And when we have to consume any partial view, we use the partial tag
        <partial name="_ValidationScriptsPartial" />
        //Thus, we have added the parial view in the scripts section of the View page
    }

    <script>
        //custom styling
        $(document).ready(function () { //when the document is ready
            $('#ApplicationUser_Role').change(function () {//when input_role.change is triggered, we want to perform a function
                var selection = $('#ApplicationUser_Role Option:Selected').text(); //This gives us the value that has been selected
                if (selection == 'Company') {
                    $('#ApplicationUser_CompanyId').show();
                }
                else {
                    $('#ApplicationUser_CompanyId').hide();
                }
            })
        })
    </script>
}
<!--because this partial view was sript-related, we added it to the Scripts section. But if it was not scripts related, we could have added it directly to the html. ->
<!--By default, it will go and look in the shared folder because that is the default location for any partial view. Because of that, it will automatically find that and it will add the JavaScript that is needed for
client side validation. Now the validation will be done first on the client’s side and for custom validation, it will go to the server side. This means that for error messages that we have in our data annotations, those appear before we can even press create-->
