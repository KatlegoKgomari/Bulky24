@page 
<!--Defines that this will be a razor page-->
@model BulkyWebRazor_Temp.Pages.Categories.IndexModel // This is the exact file that we have in the cs file. In MVC, we had to define that, in Razor paages, it already creates that cs file and adds that in the @ statement
@* @{ We do not need this.
} *@




<!--Directly access the model and display all the categories-->







<!--We want to be ble to add a new category-->

<div class="container"> <!--We are using bootstap classes. In bootstrap, row is divided into 12 columns in a page-->
    <div class="row pt-4 pb-4"> <!--row with a padding top of 4-->
        <div class="col-6"> <!--We want to display the heading in the first 6 columns-->
            <h2 class="text-primary">Category List</h2> <!--text-primary is also a bootstrap class-->
        </div>
        <div class="col-6 text-end"> <!--text-end makes sure that it floats to the right side-->
            <a asp-page="/Categories/Create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Create New Category
            </a>
        </div>
    </div>
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Category Name</th>
                <th>Display Order</th>
                <th></th> <!--to create a third column-->
            </tr>
        </thead>
    
        <tbody> <!--This is what happens in the body of the table. For each one, we make a row-->
            @foreach(var obj in Model.CategoryList.OrderBy(u => u.DisplayOrder)) // Model is the complete IndexModel so we have to say Categorylist
            { //model needs to be in all caps for this to work
                <tr>
                    <td>@obj.Name</td>
                    <td>@obj.DisplayOrder</td>
                    <td >
                        <div class="w-75 btn-group" role="group">
                            <!--we have to specify the whole route-->
                            <a asp-page="/Categories/Edit" asp-route-id="@obj.Id" class="btn btn-primary mx-2"><i class="bi bi-pencil-square"></i>Edit</a> <!--we will be working with the same category controller so we write category.We have margin x of 2(mx-2). asp-route-categoryId="obj.Id" passes in the id. You can call the d part anything you want but rather name it the same thig as the variable you passed in-->
                            <a asp-page="/Categories/Delete" asp-route-id="@obj.Id" class="btn btn-danger mx-2"><i class="bi bi-trash-fill"></i>Delete</a>
                        </div> <!--w-75 is for thw width -->
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
