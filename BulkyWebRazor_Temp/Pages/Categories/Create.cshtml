@page
@model BulkyWebRazor_Temp.Pages.Categories.CreateModel


<!--Unlike MVC, we do not add the model here but we will have to create it in Pagemodel and access it directly-->



<form method="post">  <!--Since we are creating the category, we have a method of post. p-3 is padding 3 and mt-4 is margin-top of four. post mans that when the button is pushed, it will hit the same endpoint with the post request. for that we need to create another action request inside teh category controller which willbe of the same name but it will be of teh type httppost so that everytime something is being posted, this endpoint will be invoked-->
    <div class="border p-3 mt-4">
        <div class="row pb-2">
            <h2 class="text-primary">Create Category</h2>
            <hr /> <!--followed by a horizontal line-->
        </div>
        <div asp-validation-summary="ModelOnly"> </div> <!--This writes out all the applicable error messages-->
        <div class="mb-3 row  p-1">
            <!--margin bottom 3-->
            <label asp-for="Category.Name" class="p-0"></label>
            <input asp-for="Category.Name" class="form-control" /> <!--form-control makes it stretch all the way out-->
            <span asp-validation-for="Category.Name" class="text-danger"></span>
            <!--text-danger makes the text red. Having the helper tag is what helps us print out the error message->
        </div>


        <div class="mb-3 row p-1">
            <!--margin bottom 3-->
            <label asp-for="Category.DisplayOrder" class="p-0"></label>
            <input asp-for="Category.DisplayOrder" class="form-control" /> <!--form-control makes it stretch all the way out-->
            <span asp-validation-for="Category.DisplayOrder" class="text-danger"></span>
        </div>
        
        <div class="row">
            <div class="col-6 col-md-3"> <!--if the screen is medium or large, you can take 3 columns-->
                <button type="submit" class="btn btn-primary form-control">Create</button>
            </div>
            <div class="col-6 col-md-3">
                <!--we want a button to go back to the previous page. that will be a link-->
                <a asp-page="/Categories/Index"  class="btn btn-outline-secondary border form-control">Back</a>
            </div>
        </div>
        
    </div>
</form>


<!--Since this partial view only has scripts, we will have to add that in a new section that is only for scripts-->
@section Scripts{
    @{//This is razor syntax. And when we have to consume any partial view, we use the partial tag
        <partial name="_ValidationScriptsPartial" />
        //Thus, we have added the parial view in the scripts section of the View page
    }
}<!--because this partial view was sript-related, we added it to the Scripts section. But if it was not scripts related, we could have added it directly to the html. ->
<!--By default, it will go and look in the shared folder because that is the default location for any partial view. Because of that, it will automatically find that and it will add the JavaScript that is needed for
client side validation. Now the validation will be done first on the client’s side and for custom validation, it will go to the server side. This means that for error messages that we have in our data annotations, those appear before we can even press create-->
